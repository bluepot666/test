/*
 * Chinese AVS video (AVS1-P2, JiZhun profile) decoder.
 * Copyright (c) 2006  Stefan Gehrer <stefan.gehrer@gmx.de>
 *
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
/*************************************************************
chengdu WP 20070526 - 20070730
secondwang@163.com
xavs½âÂëÆ÷2.0°æ±¾

**************************************************************/

//#include "stdafx.h"
#include "xavs.h"
#include "xavs_globe.h"
#include "xavs_dsp.h"
#include "stdio.h"
#include  <stdio.h>
#include  <math.h>
#include  <stdlib.h>


const xavs_vector MV_NOT_AVAIL    = {0,0,1,NOT_AVAIL};
const xavs_vector MV_REF_DIR   = {0,0,1,REF_DIR};
const xavs_vector MV_INTRA = {0,0,1,REF_INTRA};
const xavs_mvref MVREF_NOT_AVAIL = {-1,0,0};

#define EOB 0,0,0
     const uint8_t dequant_shift[64] = 
	{
		14,14,14,14,14,14,14,14,
			13,13,13,13,13,13,13,13,
			13,12,12,12,12,12,12,12,
			11,11,11,11,11,11,11,11,
			11,10,10,10,10,10,10,10,
			10, 9, 9, 9, 9, 9, 9, 9,
			9, 8, 8, 8, 8, 8, 8, 8,
			7, 7, 7, 7, 7, 7, 7, 7
	};
	 const uint16_t dequant_mul[64] = 
	{
		32768,36061,38968,42495,46341,50535,55437,60424,
			32932,35734,38968,42495,46177,50535,55109,59933,
			65535,35734,38968,42577,46341,50617,55027,60097,
			32809,35734,38968,42454,46382,50576,55109,60056,
			65535,35734,38968,42495,46320,50515,55109,60076,
			65535,35744,38968,42495,46341,50535,55099,60087,
			65535,35734,38973,42500,46341,50535,55109,60097,
			32771,35734,38965,42497,46341,50535,55109,60099
	};
	 const uint8_t zigzag_progressive[64]=
	{
		
			0, 1, 8, 16, 9, 2, 3, 10,
			17, 24, 32, 25, 18, 11, 4, 5,
			12, 19, 26, 33, 40, 48, 41, 34,
			27, 20, 13, 6, 7, 14, 21, 28,
			35, 42, 49, 56, 57, 50, 43, 36,
			29, 22, 15, 23, 30, 37, 44, 51,
			58, 59, 52, 45, 38, 31, 39, 46,
			53, 60, 61, 54, 47, 55, 62, 63
		

	};
	
	 const uint8_t zigzag_field[64]=
	{
	    0, 8, 16, 1, 24, 32, 9, 17,
		40, 48, 25, 2, 10, 56, 33, 18,
		3, 41, 49, 26, 11, 19, 4, 57,
		34, 12, 42, 27, 20, 50, 35, 28,
		5, 13, 58, 43, 36, 21, 6, 29,
		51, 44, 14, 22, 37, 59, 52, 30,
		45, 60, 38, 53, 46, 61, 54, 7,
		62, 15, 23, 31, 39, 47, 55, 63
	};

 const uint8_t chroma_qp[64] = 
{
	0,  1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
	16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
	32,33,34,35,36,37,38,39,40,41,42,42,43,43,44,44,
	45,45,46,46,47,47,48,48,48,49,49,49,50,50,50,51
};

 const xavs_vlc intra_2dvlc[7] = 
{
	{
		   { //level / run / table_inc
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  1, 8, 1},{ -1, 8, 1},{  1, 9, 1},{ -1, 9, 1},
			   {  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},{  2, 1, 2},{ -2, 1, 2},
			   {  1,12, 1},{ -1,12, 1},{  1,13, 1},{ -1,13, 1},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  2, 2, 2},{ -2, 2, 2},{  1,16, 1},{ -1,16, 1},
			   {  1,17, 1},{ -1,17, 1},{  3, 1, 3},{ -3, 1, 3},{  1,18, 1},{ -1,18, 1},
			   {  1,19, 1},{ -1,19, 1},{  2, 3, 2},{ -2, 3, 2},{  1,20, 1},{ -1,20, 1},
			   {  1,21, 1},{ -1,21, 1},{  2, 4, 2},{ -2, 4, 2},{  1,22, 1},{ -1,22, 1},
			   {  2, 5, 2},{ -2, 5, 2},{  1,23, 1},{ -1,23, 1},{   EOB   }
		   },
			   //level_add
		   { 0, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2,-1,-1,-1},
		   2, //golomb_order
		   0, //inc_limit
		   23, //max_run
	   },
	   {
		   { //level / run
			   {  1, 1, 0},{ -1, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  2, 1, 1},{ -2, 1, 1},
			   {  1, 3, 0},{ -1, 3, 0},{   EOB   },{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},
			   { -1, 5, 0},{  1, 6, 0},{ -1, 6, 0},{  3, 1, 2},{ -3, 1, 2},{  2, 2, 1},
			   { -2, 2, 1},{  1, 7, 0},{ -1, 7, 0},{  1, 8, 0},{ -1, 8, 0},{  1, 9, 0},
			   { -1, 9, 0},{  2, 3, 1},{ -2, 3, 1},{  4, 1, 2},{ -4, 1, 2},{  1,10, 0},
			   { -1,10, 0},{  1,11, 0},{ -1,11, 0},{  2, 4, 1},{ -2, 4, 1},{  3, 2, 2},
			   { -3, 2, 2},{  1,12, 0},{ -1,12, 0},{  2, 5, 1},{ -2, 5, 1},{  5, 1, 3},
			   { -5, 1, 3},{  1,13, 0},{ -1,13, 0},{  2, 6, 1},{ -2, 6, 1},{  1,14, 0},
			   { -1,14, 0},{  2, 7, 1},{ -2, 7, 1},{  2, 8, 1},{ -2, 8, 1},{  3, 3, 2},
			   { -3, 3, 2},{  6, 1, 3},{ -6, 1, 3},{  1,15, 0},{ -1,15, 0}
		   },
			   //level_add
		   { 0, 7, 4, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,
		   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
		   2, //golomb_order
		   1, //inc_limit
		   15, //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},{ -1, 2, 0},
				   {  3, 1, 1},{ -3, 1, 1},{   EOB   },{  1, 3, 0},{ -1, 3, 0},{  2, 2, 0},
				   { -2, 2, 0},{  4, 1, 1},{ -4, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 2},
				   { -5, 1, 2},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 3, 0},
				   { -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 2},{ -6, 1, 2},{  2, 4, 0},
				   { -2, 4, 0},{  1, 7, 0},{ -1, 7, 0},{  4, 2, 1},{ -4, 2, 1},{  7, 1, 2},
				   { -7, 1, 2},{  3, 3, 1},{ -3, 3, 1},{  2, 5, 0},{ -2, 5, 0},{  1, 8, 0},
				   { -1, 8, 0},{  2, 6, 0},{ -2, 6, 0},{  8, 1, 3},{ -8, 1, 3},{  1, 9, 0},
				   { -1, 9, 0},{  5, 2, 2},{ -5, 2, 2},{  3, 4, 1},{ -3, 4, 1},{  2, 7, 0},
				   { -2, 7, 0},{  9, 1, 3},{ -9, 1, 3},{  1,10, 0},{ -1,10, 0}
			   },
				   //level_add
			   { 0,10, 6, 4, 4, 3, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   2, //inc_limit
			   10, //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},{ -3, 1, 0},
				   {  1, 2, 0},{ -1, 2, 0},{   EOB   },{  4, 1, 0},{ -4, 1, 0},{  5, 1, 1},
				   { -5, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 3, 0},{ -1, 3, 0},{  6, 1, 1},
				   { -6, 1, 1},{  3, 2, 0},{ -3, 2, 0},{  7, 1, 1},{ -7, 1, 1},{  1, 4, 0},
				   { -1, 4, 0},{  8, 1, 2},{ -8, 1, 2},{  2, 3, 0},{ -2, 3, 0},{  4, 2, 0},
				   { -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  9, 1, 2},{ -9, 1, 2},{  5, 2, 1},
				   { -5, 2, 1},{  2, 4, 0},{ -2, 4, 0},{ 10, 1, 2},{-10, 1, 2},{  3, 3, 0},
				   { -3, 3, 0},{  1, 6, 0},{ -1, 6, 0},{ 11, 1, 3},{-11, 1, 3},{  6, 2, 1},
				   { -6, 2, 1},{  1, 7, 0},{ -1, 7, 0},{  2, 5, 0},{ -2, 5, 0},{  3, 4, 0},
				   { -3, 4, 0},{ 12, 1, 3},{-12, 1, 3},{  4, 3, 0},{ -4, 3, 0}
			   },
				   //level_add
			   { 0,13, 7, 5, 4, 3, 2, 2,-1,-1,-1 -1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   4, //inc_limit
			   7, //max_run
			   },
			   {
				   { //level / run
					   {  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},{ -3, 1, 0},
					   {   EOB   },{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
					   { -6, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 1},
					   { -8, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  9, 1, 1},{ -9, 1, 1},{ 10, 1, 1},
					   {-10, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  3, 2, 0},{ -3, 2, 0},{ 11, 1, 2},
					   {-11, 1, 2},{  4, 2, 0},{ -4, 2, 0},{ 12, 1, 2},{-12, 1, 2},{ 13, 1, 2},
					   {-13, 1, 2},{  5, 2, 0},{ -5, 2, 0},{  1, 4, 0},{ -1, 4, 0},{  2, 3, 0},
					   { -2, 3, 0},{ 14, 1, 2},{-14, 1, 2},{  6, 2, 0},{ -6, 2, 0},{ 15, 1, 2},
					   {-15, 1, 2},{ 16, 1, 2},{-16, 1, 2},{  3, 3, 0},{ -3, 3, 0},{  1, 5, 0},
					   { -1, 5, 0},{  7, 2, 0},{ -7, 2, 0},{ 17, 1, 2},{-17, 1, 2}
				   },
					   //level_add
				   { 0,18, 8, 4, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   7, //inc_limit
				   5, //max_run
			   },
			   {
				   { //level / run
					   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
					   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  9, 1, 0},
					   { -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{  1, 2, 0},{ -1, 2, 0},{ 11, 1, 1},
					   {-11, 1, 1},{ 12, 1, 1},{-12, 1, 1},{ 13, 1, 1},{-13, 1, 1},{  2, 2, 0},
					   { -2, 2, 0},{ 14, 1, 1},{-14, 1, 1},{ 15, 1, 1},{-15, 1, 1},{  3, 2, 0},
					   { -3, 2, 0},{ 16, 1, 1},{-16, 1, 1},{  1, 3, 0},{ -1, 3, 0},{ 17, 1, 1},
					   {-17, 1, 1},{  4, 2, 0},{ -4, 2, 0},{ 18, 1, 1},{-18, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{ 19, 1, 1},{-19, 1, 1},{ 20, 1, 1},{-20, 1, 1},{  6, 2, 0},
					   { -6, 2, 0},{ 21, 1, 1},{-21, 1, 1},{  2, 3, 0},{ -2, 3, 0}
				   },
					   //level_add
				   { 0,22, 7, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   10, //inc_limit
				   3, //max_run
				   },
				   {
					   { //level / run
						   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
						   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
						   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  9, 1, 0},
						   { -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},{-11, 1, 0},{ 12, 1, 0},
						   {-12, 1, 0},{ 13, 1, 0},{-13, 1, 0},{ 14, 1, 0},{-14, 1, 0},{ 15, 1, 0},
						   {-15, 1, 0},{ 16, 1, 0},{-16, 1, 0},{  1, 2, 0},{ -1, 2, 0},{ 17, 1, 0},
						   {-17, 1, 0},{ 18, 1, 0},{-18, 1, 0},{ 19, 1, 0},{-19, 1, 0},{ 20, 1, 0},
						   {-20, 1, 0},{ 21, 1, 0},{-21, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 22, 1, 0},
						   {-22, 1, 0},{ 23, 1, 0},{-23, 1, 0},{ 24, 1, 0},{-24, 1, 0},{ 25, 1, 0},
						   {-25, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 26, 1, 0},{-26, 1, 0}
					   },
						   //level_add
					   { 0,27, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
					   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
					   2, //golomb_order
					   INT_MAX, //inc_limit
					   2, //max_run
				   }
};

 const xavs_vlc inter_2dvlc[7] = 
{
	   {
		   { //level / run
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  1, 8, 1},{ -1, 8, 1},{  1, 9, 1},{ -1, 9, 1},
			   {  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},{  1,12, 1},{ -1,12, 1},
			   {  1,13, 1},{ -1,13, 1},{  2, 1, 2},{ -2, 1, 2},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  1,16, 1},{ -1,16, 1},{  1,17, 1},{ -1,17, 1},
			   {  1,18, 1},{ -1,18, 1},{  1,19, 1},{ -1,19, 1},{  3, 1, 3},{ -3, 1, 3},
			   {  1,20, 1},{ -1,20, 1},{  1,21, 1},{ -1,21, 1},{  2, 2, 2},{ -2, 2, 2},
			   {  1,22, 1},{ -1,22, 1},{  1,23, 1},{ -1,23, 1},{  1,24, 1},{ -1,24, 1},
			   {  1,25, 1},{ -1,25, 1},{  1,26, 1},{ -1,26, 1},{   EOB   }
		   },
			   //level_add
		   { 0, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		   3, //golomb_order
		   0, //inc_limit
		   26 //max_run
	   },
	   {
		   { //level / run
			   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  1, 2, 0},{ -1, 2, 0},{  1, 3, 0},
			   { -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},{ -1, 5, 0},{  1, 6, 0},
			   { -1, 6, 0},{  2, 1, 1},{ -2, 1, 1},{  1, 7, 0},{ -1, 7, 0},{  1, 8, 0},
			   { -1, 8, 0},{  1, 9, 0},{ -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  2, 2, 1},
			   { -2, 2, 1},{  1,11, 0},{ -1,11, 0},{  1,12, 0},{ -1,12, 0},{  3, 1, 2},
			   { -3, 1, 2},{  1,13, 0},{ -1,13, 0},{  1,14, 0},{ -1,14, 0},{  2, 3, 1},
			   { -2, 3, 1},{  1,15, 0},{ -1,15, 0},{  2, 4, 1},{ -2, 4, 1},{  1,16, 0},
			   { -1,16, 0},{  2, 5, 1},{ -2, 5, 1},{  1,17, 0},{ -1,17, 0},{  4, 1, 3},
			   { -4, 1, 3},{  2, 6, 1},{ -2, 6, 1},{  1,18, 0},{ -1,18, 0},{  1,19, 0},
			   { -1,19, 0},{  2, 7, 1},{ -2, 7, 1},{  3, 2, 2},{ -3, 2, 2}
		   },
			   //level_add
		   { 0, 5, 4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2,-1,-1,-1,-1,-1,-1,-1},
		   2, //golomb_order
		   1, //inc_limit
		   19 //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  1, 2, 0},{ -1, 2, 0},{  2, 1, 0},
				   { -2, 1, 0},{  1, 3, 0},{ -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  3, 1, 1},
				   { -3, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  1, 6, 0},
				   { -1, 6, 0},{  1, 7, 0},{ -1, 7, 0},{  2, 3, 0},{ -2, 3, 0},{  4, 1, 2},
				   { -4, 1, 2},{  1, 8, 0},{ -1, 8, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 4, 0},
				   { -2, 4, 0},{  1, 9, 0},{ -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  5, 1, 2},
				   { -5, 1, 2},{  2, 5, 0},{ -2, 5, 0},{  1,11, 0},{ -1,11, 0},{  2, 6, 0},
				   { -2, 6, 0},{  1,12, 0},{ -1,12, 0},{  3, 3, 1},{ -3, 3, 1},{  6, 1, 2},
				   { -6, 1, 2},{  4, 2, 2},{ -4, 2, 2},{  1,13, 0},{ -1,13, 0},{  2, 7, 0},
				   { -2, 7, 0},{  3, 4, 1},{ -3, 4, 1},{  1,14, 0},{ -1,14, 0}
			   },
				   //level_add
			   { 0, 7, 5, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   2, //inc_limit
			   14 //max_run
		   },
		   {
			   { //level / run
				   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},
				   { -1, 2, 0},{  3, 1, 0},{ -3, 1, 0},{  1, 3, 0},{ -1, 3, 0},{  2, 2, 0},
				   { -2, 2, 0},{  4, 1, 1},{ -4, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 1},
				   { -5, 1, 1},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 0},{ -3, 2, 0},{  2, 3, 0},
				   { -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 1},{ -6, 1, 1},{  2, 4, 0},
				   { -2, 4, 0},{  1, 7, 0},{ -1, 7, 0},{  4, 2, 1},{ -4, 2, 1},{  7, 1, 2},
				   { -7, 1, 2},{  3, 3, 0},{ -3, 3, 0},{  1, 8, 0},{ -1, 8, 0},{  2, 5, 0},
				   { -2, 5, 0},{  8, 1, 2},{ -8, 1, 2},{  1, 9, 0},{ -1, 9, 0},{  3, 4, 0},
				   { -3, 4, 0},{  2, 6, 0},{ -2, 6, 0},{  5, 2, 1},{ -5, 2, 1},{  1,10, 0},
				   { -1,10, 0},{  9, 1, 2},{ -9, 1, 2},{  4, 3, 1},{ -4, 3, 1}
			   },
				   //level_add
			   { 0,10, 6, 5, 4, 3, 3, 2, 2, 2, 2,-1,-1,-1,-1,-1,-1,
			   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			   2, //golomb_order
			   3, //inc_limit
			   10 //max_run
			   },
			   {
				   { //level / run
					   {  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},
					   { -5, 1, 0},{  2, 2, 0},{ -2, 2, 0},{  1, 3, 0},{ -1, 3, 0},{  6, 1, 0},
					   { -6, 1, 0},{  3, 2, 0},{ -3, 2, 0},{  7, 1, 1},{ -7, 1, 1},{  1, 4, 0},
					   { -1, 4, 0},{  8, 1, 1},{ -8, 1, 1},{  2, 3, 0},{ -2, 3, 0},{  4, 2, 0},
					   { -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{  9, 1, 1},{ -9, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{  2, 4, 0},{ -2, 4, 0},{  1, 6, 0},{ -1, 6, 0},{ 10, 1, 2},
					   {-10, 1, 2},{  3, 3, 0},{ -3, 3, 0},{ 11, 1, 2},{-11, 1, 2},{  1, 7, 0},
					   { -1, 7, 0},{  6, 2, 0},{ -6, 2, 0},{  3, 4, 0},{ -3, 4, 0},{  2, 5, 0},
					   { -2, 5, 0},{ 12, 1, 2},{-12, 1, 2},{  4, 3, 0},{ -4, 3, 0}
				   },
					   //level_add
				   { 0,13, 7, 5, 4, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   6, //inc_limit
				   7  //max_run
			   },
			   {
				   { //level / run
					   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
					   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  1, 2, 0},
					   { -1, 2, 0},{  6, 1, 0},{ -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},
					   { -8, 1, 0},{  2, 2, 0},{ -2, 2, 0},{  9, 1, 0},{ -9, 1, 0},{  1, 3, 0},
					   { -1, 3, 0},{ 10, 1, 1},{-10, 1, 1},{  3, 2, 0},{ -3, 2, 0},{ 11, 1, 1},
					   {-11, 1, 1},{  4, 2, 0},{ -4, 2, 0},{ 12, 1, 1},{-12, 1, 1},{  1, 4, 0},
					   { -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{ 13, 1, 1},{-13, 1, 1},{  5, 2, 0},
					   { -5, 2, 0},{ 14, 1, 1},{-14, 1, 1},{  6, 2, 0},{ -6, 2, 0},{  1, 5, 0},
					   { -1, 5, 0},{ 15, 1, 1},{-15, 1, 1},{  3, 3, 0},{ -3, 3, 0},{ 16, 1, 1},
					   {-16, 1, 1},{  2, 4, 0},{ -2, 4, 0},{  7, 2, 0},{ -7, 2, 0}
				   },
					   //level_add
				   { 0,17, 8, 4, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
				   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
				   2, //golomb_order
				   9, //inc_limit
				   5  //max_run
				   },
				   {
					   { //level / run
						   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
						   { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
						   { -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  8, 1, 0},
						   { -8, 1, 0},{  9, 1, 0},{ -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},
						   {-11, 1, 0},{ 12, 1, 0},{-12, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 13, 1, 0},
						   {-13, 1, 0},{  1, 3, 0},{ -1, 3, 0},{ 14, 1, 0},{-14, 1, 0},{ 15, 1, 0},
						   {-15, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 16, 1, 0},{-16, 1, 0},{ 17, 1, 0},
						   {-17, 1, 0},{ 18, 1, 0},{-18, 1, 0},{  4, 2, 0},{ -4, 2, 0},{ 19, 1, 0},
						   {-19, 1, 0},{ 20, 1, 0},{-20, 1, 0},{  2, 3, 0},{ -2, 3, 0},{  1, 4, 0},
						   { -1, 4, 0},{  5, 2, 0},{ -5, 2, 0},{ 21, 1, 0},{-21, 1, 0}
					   },
						   //level_add
					   { 0,22, 6, 3, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
					   -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
					   2, //golomb_order
					   INT_MAX, //inc_limit
					   4 //max_run
				   }
};
 
 const xavs_vlc chroma_2dvlc[5] = 
{
	   {
		   { //level / run
			   {  1, 1, 1},{ -1, 1, 1},{  1, 2, 1},{ -1, 2, 1},{  1, 3, 1},{ -1, 3, 1},
			   {  1, 4, 1},{ -1, 4, 1},{  1, 5, 1},{ -1, 5, 1},{  1, 6, 1},{ -1, 6, 1},
			   {  1, 7, 1},{ -1, 7, 1},{  2, 1, 2},{ -2, 1, 2},{  1, 8, 1},{ -1, 8, 1},
			   {  1, 9, 1},{ -1, 9, 1},{  1,10, 1},{ -1,10, 1},{  1,11, 1},{ -1,11, 1},
			   {  1,12, 1},{ -1,12, 1},{  1,13, 1},{ -1,13, 1},{  1,14, 1},{ -1,14, 1},
			   {  1,15, 1},{ -1,15, 1},{  3, 1, 3},{ -3, 1, 3},{  1,16, 1},{ -1,16, 1},
			   {  1,17, 1},{ -1,17, 1},{  1,18, 1},{ -1,18, 1},{  1,19, 1},{ -1,19, 1},
			   {  1,20, 1},{ -1,20, 1},{  1,21, 1},{ -1,21, 1},{  1,22, 1},{ -1,22, 1},
			   {  2, 2, 2},{ -2, 2, 2},{  1,23, 1},{ -1,23, 1},{  1,24, 1},{ -1,24, 1},
			   {  1,25, 1},{ -1,25, 1},{  4, 1, 3},{ -4, 1, 3},{   EOB   }
		   },
			   //level_add
		   { 0, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2, 2, 2, 2, 2, 2,-1},
		   2, //golomb_order
		   0, //inc_limit
		   25 //max_run
	   },
	   {
		   { //level / run
			   {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  2, 1, 1},
			   { -2, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  1, 4, 0},{ -1, 4, 0},{  1, 5, 0},
			   { -1, 5, 0},{  1, 6, 0},{ -1, 6, 0},{  3, 1, 2},{ -3, 1, 2},{  1, 7, 0},
			   { -1, 7, 0},{  1, 8, 0},{ -1, 8, 0},{  2, 2, 1},{ -2, 2, 1},{  1, 9, 0},
			   { -1, 9, 0},{  1,10, 0},{ -1,10, 0},{  1,11, 0},{ -1,11, 0},{  4, 1, 2},
			   { -4, 1, 2},{  1,12, 0},{ -1,12, 0},{  1,13, 0},{ -1,13, 0},{  1,14, 0},
			   { -1,14, 0},{  2, 3, 1},{ -2, 3, 1},{  1,15, 0},{ -1,15, 0},{  2, 4, 1},
			   { -2, 4, 1},{  5, 1, 3},{ -5, 1, 3},{  3, 2, 2},{ -3, 2, 2},{  1,16, 0},
			   { -1,16, 0},{  1,17, 0},{ -1,17, 0},{  1,18, 0},{ -1,18, 0},{  2, 5, 1},
			   { -2, 5, 1},{  1,19, 0},{ -1,19, 0},{  1,20, 0},{ -1,20, 0}
		   },
			   //level_add
		   { 0, 6, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		   2, 2, 2, 2,-1,-1,-1,-1,-1,-1},
		   0, //golomb_order
		   1, //inc_limit
		   20 //max_run
		},
		{
			{ //level / run
				{  1, 1, 0},{ -1, 1, 0},{   EOB   },{  2, 1, 0},{ -2, 1, 0},{  1, 2, 0},
				{ -1, 2, 0},{  3, 1, 1},{ -3, 1, 1},{  1, 3, 0},{ -1, 3, 0},{  4, 1, 1},
				{ -4, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  1, 4, 0},{ -1, 4, 0},{  5, 1, 2},
				{ -5, 1, 2},{  1, 5, 0},{ -1, 5, 0},{  3, 2, 1},{ -3, 2, 1},{  2, 3, 0},
				{ -2, 3, 0},{  1, 6, 0},{ -1, 6, 0},{  6, 1, 2},{ -6, 1, 2},{  1, 7, 0},
				{ -1, 7, 0},{  2, 4, 0},{ -2, 4, 0},{  7, 1, 2},{ -7, 1, 2},{  1, 8, 0},
				{ -1, 8, 0},{  4, 2, 1},{ -4, 2, 1},{  1, 9, 0},{ -1, 9, 0},{  3, 3, 1},
				{ -3, 3, 1},{  2, 5, 0},{ -2, 5, 0},{  2, 6, 0},{ -2, 6, 0},{  8, 1, 2},
				{ -8, 1, 2},{  1,10, 0},{ -1,10, 0},{  1,11, 0},{ -1,11, 0},{  9, 1, 2},
				{ -9, 1, 2},{  5, 2, 2},{ -5, 2, 2},{  3, 4, 1},{ -3, 4, 1},
			},
     //level_add
			{ 0,10, 6, 4, 4, 3, 3, 2, 2, 2, 2, 2,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			1, //golomb_order
			2, //inc_limit
			11 //max_run
		 },
		 {
			 { //level / run
				 {   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
				 { -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  1, 2, 0},{ -1, 2, 0},{  5, 1, 1},
				 { -5, 1, 1},{  2, 2, 0},{ -2, 2, 0},{  6, 1, 1},{ -6, 1, 1},{  1, 3, 0},
				 { -1, 3, 0},{  7, 1, 1},{ -7, 1, 1},{  3, 2, 0},{ -3, 2, 0},{  8, 1, 1},
				 { -8, 1, 1},{  1, 4, 0},{ -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{  9, 1, 1},
				 { -9, 1, 1},{  4, 2, 0},{ -4, 2, 0},{  1, 5, 0},{ -1, 5, 0},{ 10, 1, 1},
				 {-10, 1, 1},{  3, 3, 0},{ -3, 3, 0},{  5, 2, 1},{ -5, 2, 1},{  2, 4, 0},
				 { -2, 4, 0},{ 11, 1, 1},{-11, 1, 1},{  1, 6, 0},{ -1, 6, 0},{ 12, 1, 1},
				 {-12, 1, 1},{  1, 7, 0},{ -1, 7, 0},{  6, 2, 1},{ -6, 2, 1},{ 13, 1, 1},
				 {-13, 1, 1},{  2, 5, 0},{ -2, 5, 0},{  1, 8, 0},{ -1, 8, 0},
			 },
			 //level_add
			 { 0,14, 7, 4, 3, 3, 2, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
			 -1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			 1, //golomb_order
			 4, //inc_limit
			 8  //max_run
		},
		{
			{ //level / run
				{   EOB   },{  1, 1, 0},{ -1, 1, 0},{  2, 1, 0},{ -2, 1, 0},{  3, 1, 0},
				{ -3, 1, 0},{  4, 1, 0},{ -4, 1, 0},{  5, 1, 0},{ -5, 1, 0},{  6, 1, 0},
				{ -6, 1, 0},{  7, 1, 0},{ -7, 1, 0},{  8, 1, 0},{ -8, 1, 0},{  1, 2, 0},
				{ -1, 2, 0},{  9, 1, 0},{ -9, 1, 0},{ 10, 1, 0},{-10, 1, 0},{ 11, 1, 0},
				{-11, 1, 0},{  2, 2, 0},{ -2, 2, 0},{ 12, 1, 0},{-12, 1, 0},{ 13, 1, 0},
				{-13, 1, 0},{  3, 2, 0},{ -3, 2, 0},{ 14, 1, 0},{-14, 1, 0},{  1, 3, 0},
				{ -1, 3, 0},{ 15, 1, 0},{-15, 1, 0},{  4, 2, 0},{ -4, 2, 0},{ 16, 1, 0},
				{-16, 1, 0},{ 17, 1, 0},{-17, 1, 0},{  5, 2, 0},{ -5, 2, 0},{  1, 4, 0},
				{ -1, 4, 0},{  2, 3, 0},{ -2, 3, 0},{ 18, 1, 0},{-18, 1, 0},{  6, 2, 0},
				{ -6, 2, 0},{ 19, 1, 0},{-19, 1, 0},{  1, 5, 0},{ -1, 5, 0},
			},
			//level_add
			{ 0,20, 7, 3, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
			-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			0, //golomb_order
			INT_MAX, //inc_limit
			5, //max_run
		}
};
#undef EOB

 const uint8_t partition_flags[30] = {
   0,                                 //I_8X8
   0,                                 //P_SKIP
   0,                                 //P_16X16
                       SPLITH,        //P_16X8
                              SPLITV, //P_8X16
                       SPLITH|SPLITV, //P_8X8
                       SPLITH|SPLITV, //B_SKIP
                       SPLITH|SPLITV, //B_DIRECT
   0,                                 //B_FWD_16X16
   0,                                 //B_BWD_16X16
   0,                                 //B_SYM_16X16
   FWD0|FWD1          |SPLITH,
   FWD0|FWD1                 |SPLITV,
   BWD0|BWD1          |SPLITH,
   BWD0|BWD1                 |SPLITV,
   FWD0|BWD1          |SPLITH,
   FWD0|BWD1                 |SPLITV,
   BWD0|FWD1          |SPLITH,
   BWD0|FWD1                 |SPLITV,
   FWD0|FWD1     |SYM1|SPLITH,
   FWD0|FWD1     |SYM1       |SPLITV,
   BWD0|FWD1     |SYM1|SPLITH,
   BWD0|FWD1     |SYM1       |SPLITV,
   FWD0|FWD1|SYM0     |SPLITH,
   FWD0|FWD1|SYM0            |SPLITV,
   FWD0|BWD1|SYM0     |SPLITH,
   FWD0|BWD1|SYM0            |SPLITV,
   FWD0|FWD1|SYM0|SYM1|SPLITH,
   FWD0|FWD1|SYM0|SYM1       |SPLITV,
                       SPLITH|SPLITV, //B_8X8 = 29
 };

const int frame_rate_tab[][2] = {
    {    0,    0},
    {24000, 1001},
    {   24,    1},
    {   25,    1},
    {30000, 1001},
    {   30,    1},
    {   50,    1},
    {60000, 1001},
    {   60,    1},
 
    {   15,    1},
 
    {    5,    1},
    {   10,    1},
    {   12,    1},
    {   15,    1},
    {    0,    0},
};


 const uint8_t mv_scan[4] = 
{
	MV_FWD_X0,MV_FWD_X1,
		MV_FWD_X2,MV_FWD_X3
};



#define SET_PARAMS                                            \
    alpha = alpha_tab[xavs_clip(qp_avg + p->ph.i_alpha_c_offset,0,63)];   \
    beta  =  beta_tab[xavs_clip(qp_avg + p->ph.i_beta_offset, 0,63)];   \
    tc    =    tc_tab[xavs_clip(qp_avg + p->ph.i_alpha_c_offset,0,63)];

/**
 * in-loop deblocking filter for a single macroblock
 *
 * boundary strength (bs) mapping:
 *
 * --4---5--
 * 0   2   |
 * | 6 | 7 |
 * 1   3   |
 * ---------
 *
 */
static inline int get_bs(xavs_decoder* p,   xavs_vector *mvP, xavs_vector *mvQ, int b) 
{
    if((mvP->ref == REF_INTRA) || (mvQ->ref == REF_INTRA))
        return 2;

    if( (abs(mvP->x - mvQ->x) >= 4) ||  (abs(mvP->y - mvQ->y) >= 4) )
	{
        return 1;
	}
    if(b)
	{
		xavs_vector * bmvP = mvP + MV_BWD_OFFS;
		xavs_vector * bmvQ = mvQ + MV_BWD_OFFS;
		if(mvP->ref == mvQ->ref  && bmvP->ref == bmvQ->ref )
		{
			if( (abs(bmvP->x - bmvQ->x) >= 4) ||  (abs(bmvP->y - bmvQ->y) >= 4) )
			{
				return 1;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 1;
		}
        
    }
	else
	{
        if(mvP->ref != mvQ->ref)
            return 1;
    }
    return 0;
}




void xavs_mb_filter(xavs_decoder *p, int i_mb_type) 
{
	
	static const uint8_t alpha_tab[64] = 
	{
		0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,
			4,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 15, 16, 18, 20,
			22, 24, 26, 28, 30, 33, 33, 35, 35, 36, 37, 37, 39, 39, 42, 44,
			46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64
	};
	
	static const uint8_t beta_tab[64] = 
	{
		0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
			2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,
			6,  7,  7,  7,  8,  8,  8,  9,  9, 10, 10, 11, 11, 12, 13, 14,
			15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 24, 25, 25, 26, 27
	};
	static const uint8_t tc_tab[64] = 
	{
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
			2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
			5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9
	};

	
    uint8_t bs[8];
	int i_loop_filter_mode = 3;
    int qp_avg, alpha, beta, tc;
    int i;
    //±£´æc[0]»òÕßr[0]

	

    p->i_topleft_border_y = p->p_top_border_y[p->i_mb_x*XAVS_MB_SIZE+XAVS_MB_SIZE-1];//0~15
    p->i_topleft_border_cb = p->p_top_border_cb[p->i_mb_x*10+8];//0~9
    p->i_topleft_border_cr = p->p_top_border_cr[p->i_mb_x*10+8];
    memcpy(&p->p_top_border_y[p->i_mb_x*XAVS_MB_SIZE], p->p_y + 15* p->cur.i_stride[0],16);
	//0µãÓÉtopleft_border¾ö¶¨
    memcpy(&p->p_top_border_cb[p->i_mb_x*10+1], p->p_cb +  7*  p->cur.i_stride[1],8);
    memcpy(&p->p_top_border_cr[p->i_mb_x*10+1], p->p_cr +  7*  p->cur.i_stride[2],8);
    for(i=0;i<8;i++) 
	{
        p->i_left_border_y[i*2+1] = *(p->p_y + 15 + (i*2+0)*p->cur.i_stride[0]);
        p->i_left_border_y[i*2+2] = *(p->p_y + 15 + (i*2+1)*p->cur.i_stride[0]);
        p->i_left_border_cb[i+1] = *(p->p_cb + 7 + i*p->cur.i_stride[1]);
        p->i_left_border_cr[i+1] = *(p->p_cr + 7 + i*p->cur.i_stride[2]);
    }
	
    if(!p->ph.b_loop_filter_disable &&
		(i_loop_filter_mode == 0 ||
		(i_loop_filter_mode == 1 && p->ph.i_picture_coding_type != XAVS_B_PICTURE) ||
		(i_loop_filter_mode == 2 && p->ph.i_picture_coding_type == XAVS_I_PICTURE) 
		
		)
		) 
	{
        /* determine bs */
        if(i_mb_type == I_8X8)
		{
            *((uint64_t *)bs) = 0x0202020202020202;
		}
        else
		{
/** mv motion vector cache
       0:    D3  B2  B3  C2
       4:    A1  X0  X1   -
       8:    A3  X2  X3   -
i_mb_type > P_8X8¼´±íÊ¾BÖ¡
bs[8]Ò»¹²8¸öÔªËØ·Ö±ð±íÊ¾×î¶àÒÔ4¸ö8*8µÄ¿é·Ö¸îµÄ4¸ö´¹Ö±±ß½çºÍ4¸öË®Æ½±ß½ç£¬Ã¿¸ö±ß½çÊÇ8¸öÏóËØ
¶ÔÓÚ16*8»òÕß8*16Ó¦¸Ã¿¼ÂÇÆäÊÇ·ñ¾ßÓÐÖÐ¼ä·Ö¸îµÄÁ½¸öË®Æ½ºÍ´¹Ö±±ß½ç
0£¬1£¬4£¬5Ó¦¸ÃÊÇºê¿é±ß½çÉÏµÄ2¸öË®Æ½ºÍ´¹Ö±±ß½ç
¶ø2£¬3ÊÇºê¿éÄÚ´¹Ö±±ß½ç¶ø£¬6£¬7ÊÇºê¿éÄÚË®Æ½±ß½ç
*/
            *((uint64_t *)bs) = 0;
            if(partition_flags[i_mb_type] & SPLITV)
			{
                bs[2] = get_bs(p, &p->mv[MV_FWD_X0], &p->mv[MV_FWD_X1], i_mb_type > P_8X8);
                bs[3] = get_bs(p, &p->mv[MV_FWD_X2], &p->mv[MV_FWD_X3], i_mb_type > P_8X8);
            }
            if(partition_flags[i_mb_type] & SPLITH)
			{
                bs[6] = get_bs(p, &p->mv[MV_FWD_X0], &p->mv[MV_FWD_X2], i_mb_type > P_8X8);
                bs[7] = get_bs(p, &p->mv[MV_FWD_X1], &p->mv[MV_FWD_X3], i_mb_type > P_8X8);
            }
            bs[0] = get_bs(p, &p->mv[MV_FWD_A1], &p->mv[MV_FWD_X0], i_mb_type > P_8X8);
            bs[1] = get_bs(p, &p->mv[MV_FWD_A3], &p->mv[MV_FWD_X2], i_mb_type > P_8X8);
            bs[4] = get_bs(p, &p->mv[MV_FWD_B2], &p->mv[MV_FWD_X0], i_mb_type > P_8X8);
            bs[5] = get_bs(p, &p->mv[MV_FWD_B3], &p->mv[MV_FWD_X1], i_mb_type > P_8X8);
        }
		
        if( *((uint64_t *)bs) ) 
		{
            if(p->i_mb_flags & A_AVAIL) 
			{
				//ºê¿é´¹Ö±±ß½ç
                qp_avg = (p->i_qp + p->i_left_qp + 1) >> 1;
                SET_PARAMS;
                xavs_filter_lv(p->p_y,p->cur.i_stride[0],alpha,beta,tc,bs[0],bs[1]);
				qp_avg = (chroma_qp[p->i_qp + p->ph.i_chroma_quant_param_delta_cb] + chroma_qp[p->i_left_qp + p->ph.i_chroma_quant_param_delta_cb] + 1) >> 1;
				SET_PARAMS
                xavs_filter_cv(p->p_cb,p->cur.i_stride[1],alpha,beta,tc,bs[0],bs[1]);
				qp_avg = (chroma_qp[p->i_qp + p->ph.i_chroma_quant_param_delta_cr] + chroma_qp[p->i_left_qp + p->ph.i_chroma_quant_param_delta_cr] + 1) >> 1;
				SET_PARAMS
                xavs_filter_cv(p->p_cr,p->cur.i_stride[2],alpha,beta,tc,bs[0],bs[1]);
            }
            qp_avg = p->i_qp;
            SET_PARAMS;
            xavs_filter_lv(p->p_y + 8,p->cur.i_stride[0],alpha,beta,tc,bs[2],bs[3]);
            xavs_filter_lh(p->p_y + 8*p->cur.i_stride[0],p->cur.i_stride[0],alpha,beta,tc,bs[6],bs[7]);

            if(p->i_mb_flags & B_AVAIL) 
			{
				//ºê¿éË®Æ½±ß½ç
                qp_avg = (p->i_qp + p->p_top_qp[p->i_mb_x] + 1) >> 1;
                SET_PARAMS;
                xavs_filter_lh(p->p_y,p->cur.i_stride[0],alpha,beta,tc,bs[4],bs[5]);
				qp_avg = (chroma_qp[p->i_qp + p->ph.i_chroma_quant_param_delta_cb] + chroma_qp[p->p_top_qp[p->i_mb_x] + p->ph.i_chroma_quant_param_delta_cb] + 1) >> 1;
				SET_PARAMS
                xavs_filter_ch(p->p_cb,p->cur.i_stride[1],alpha,beta,tc,bs[4],bs[5]);

				qp_avg = (chroma_qp[p->i_qp + p->ph.i_chroma_quant_param_delta_cr] + chroma_qp[p->p_top_qp[p->i_mb_x] + p->ph.i_chroma_quant_param_delta_cr] + 1) >> 1;
				SET_PARAMS
                xavs_filter_ch(p->p_cr,p->cur.i_stride[2],alpha,beta,tc,bs[4],bs[5]);
            }
        }
    }
	
    p->i_left_qp = p->i_qp;
    p->p_top_qp[p->i_mb_x] = p->i_qp;
	
}

#undef SET_PARAMS


int xavs_mb_next(xavs_decoder *p)
{

	
	int i,i_y;
	int i_offset=p->i_mb_x<<1;
	p->i_mb_flags |= A_AVAIL;
	p->p_y += 16;p->p_cb += 8;p->p_cr += 8;
	for(i=0;i<=20;i+=4)
	{//Ô­À´B3,X1,X3µÄÔË¶¯Ê¸Á¿³ÉÎªÓÒ±ßÐÂµÄºê¿éµÄÔ¤²âÔË¶¯Ê¸Á¿×ó±ßµÄºòÑ¡×Ó¼´D2,A1,A3
        p->mv[i] = p->mv[i+2];
		p->mvref[i] = p->mvref[i+2];
	}
	
	//±£´æX2,X3×÷ÎªÏÂÃæºê¿éµÄÔ¤²âÔË¶¯Ê¸Á¿µÄºòÑ¡×Ó¼´B2,B3
	p->mv[MV_FWD_D3] = p->p_top_mv[0][i_offset+1];
	p->mv[MV_BWD_D3] = p->p_top_mv[1][i_offset+1];//ÐÞ¸ÄÇ°ÏÈ±£´æµ½D3;
	p->p_top_mv[0][i_offset+0] = p->mv[MV_FWD_X2];
    p->p_top_mv[0][i_offset+1] = p->mv[MV_FWD_X3];
    p->p_top_mv[1][i_offset+0] = p->mv[MV_BWD_X2];
    p->p_top_mv[1][i_offset+1] = p->mv[MV_BWD_X3];
	


	p->mvref[MV_FWD_D3] = p->p_top_mvref[0][i_offset+1];
	p->mvref[MV_BWD_D3] = p->p_top_mvref[1][i_offset+1];//ÐÞ¸ÄÇ°ÏÈ±£´æµ½D3;
	p->p_top_mvref[0][i_offset+0] = p->mvref[MV_FWD_X2];
    p->p_top_mvref[0][i_offset+1] = p->mvref[MV_FWD_X3];
    p->p_top_mvref[1][i_offset+0] = p->mvref[MV_BWD_X2];
    p->p_top_mvref[1][i_offset+1] = p->mvref[MV_BWD_X3];
	
	
	p->i_cbp_a = p->p_top_cbp[p->i_mb_x] = p->i_cbp;

    p->i_mb_x++;
	if(p->i_mb_x == p->i_mb_width) 
	{ 
		//ÏÂÒ»ÐÐºê¿é
        p->i_mb_flags = B_AVAIL|C_AVAIL;//Èç¹ûi_mb_width=1;ÔòC_AVAIL²»¿ÉµÃµ½
        /* Çå³ý×ó±ß¿éÔ¤²âÄ£Ê½A1,A3*/
        p->i_intra_pred_mode_y[INTRA_MODE_A1] = p->i_intra_pred_mode_y[INTRA_MODE_A3] = NOT_AVAIL;
        /* Çå³ý×ó±ß¿éÔË¶¯Ê¸Á¿C2,A1,A3 */
        for(i=0;i<=20;i+=4)
		{
            p->mv[i] = MV_NOT_AVAIL;
			p->mvref[i] = MVREF_NOT_AVAIL;
		}
        p->i_mb_x = 0;p->i_mb_y++;
		i_y=p->i_mb_y-p->i_mb_offset;
        p->p_y =p->cur.p_data[0] + i_y*XAVS_MB_SIZE*p->cur.i_stride[0];
		p->p_cb =p->cur.p_data[1] + i_y*XAVS_MB_SIZE/2*p->cur.i_stride[1];
		p->p_cr =p->cur.p_data[2] + i_y*XAVS_MB_SIZE/2*p->cur.i_stride[2];
		p->b_first_line=0;

		p->mvd_a[0].enable = 0;
		p->mvd_a[1].enable = 0;
		p->mvd_a[2].enable = 0;
		p->mvd_a[3].enable = 0;
		
		

    }
	if(p->i_mb_x==p->i_mb_width-1)
	{
		p->i_mb_flags &= ~C_AVAIL;
	}
	//if(p->i_mb_x&&(p->i_mb_y&&(!(p->i_mb_y==p->i_mb_height/2&&p->ph.b_picture_structure==0)))) 
	if(p->i_mb_x&&p->i_mb_y&&p->b_first_line==0) 
	
	{
		 p->i_mb_flags |= D_AVAIL;
	}
	/*if(!(p->i_mb_flags & B_AVAIL)) 
	{
        p->i_mb_flags &= ~(C_AVAIL|D_AVAIL);
    } 
	*/
	
	
	return 0;
}

static void inline xavs_mb_init_aec(xavs_decoder *p)
{
	int i_offset=p->i_mb_x<<1;
	//µÚÒ»¸öºê¿éÓ¦¸ÃÎª0£¬ABCD¾ù²»¿ÉµÃµ½£¬
//AÎ»ÖÃÔÚ½âÂëºóÖ±½Ó»ñµÃ
	if(!(p->i_mb_flags & A_AVAIL))    
	{
		p->mvref[MV_FWD_A1] = MVREF_NOT_AVAIL;
		p->mvref[MV_FWD_A3] = MVREF_NOT_AVAIL;
		p->mvref[MV_BWD_A1] = MVREF_NOT_AVAIL;
        p->mvref[MV_BWD_A3] = MVREF_NOT_AVAIL;
	}


	if(p->i_mb_flags & B_AVAIL)
	{
		 p->mvref[MV_FWD_B2] = p->p_top_mvref[0][i_offset];
		 p->mvref[MV_BWD_B2] = p->p_top_mvref[1][i_offset];
		 p->mvref[MV_FWD_B3] = p->p_top_mvref[0][i_offset+1];
		 p->mvref[MV_BWD_B3] = p->p_top_mvref[1][i_offset+1];		 
	}
	else
	{
		p->mvref[MV_FWD_B2] = MVREF_NOT_AVAIL;
        p->mvref[MV_FWD_B3] = MVREF_NOT_AVAIL;
        p->mvref[MV_BWD_B2] = MVREF_NOT_AVAIL;
        p->mvref[MV_BWD_B3] = MVREF_NOT_AVAIL;
	}

	if(p->i_mb_flags & C_AVAIL)
	{
		p->mvref[MV_FWD_C2] = p->p_top_mvref[0][i_offset+2];
        p->mvref[MV_BWD_C2] = p->p_top_mvref[1][i_offset+2];
	}
	else
	{
		p->mvref[MV_FWD_C2] = MVREF_NOT_AVAIL;
        p->mvref[MV_BWD_C2] = MVREF_NOT_AVAIL;
	}
	if(!(p->i_mb_flags & D_AVAIL))
	{
		p->mvref[MV_FWD_D3] = MVREF_NOT_AVAIL;
	    p->mvref[MV_BWD_D3] = MVREF_NOT_AVAIL;		
	}
	for(int i = 0; i < 24; i++)
	{
		p->mvref[i].ref = p->mv[i].ref;
	}

}

void xavs_mb_init(xavs_decoder *p) 
{
	int i_offset=p->i_mb_x<<1;
	//µÚÒ»¸öºê¿éÓ¦¸ÃÎª0£¬ABCD¾ù²»¿ÉµÃµ½£¬
//AÎ»ÖÃÔÚ½âÂëºóÖ±½Ó»ñµÃ
	if(!(p->i_mb_flags & A_AVAIL))    
	{
		p->mv[MV_FWD_A1] = MV_NOT_AVAIL;
        p->mv[MV_FWD_A3] = MV_NOT_AVAIL;
        p->mv[MV_BWD_A1] = MV_NOT_AVAIL;
        p->mv[MV_BWD_A3] = MV_NOT_AVAIL;

		p->i_intra_pred_mode_y[INTRA_MODE_A1] = p->i_intra_pred_mode_y[INTRA_MODE_A3] = NOT_AVAIL;
	}


	if(p->i_mb_flags & B_AVAIL)
	{
		 p->mv[MV_FWD_B2] = p->p_top_mv[0][i_offset];
		 p->mv[MV_BWD_B2] = p->p_top_mv[1][i_offset];
		 p->mv[MV_FWD_B3] = p->p_top_mv[0][i_offset+1];
		 p->mv[MV_BWD_B3] = p->p_top_mv[1][i_offset+1];
 
		 //ÕâÀï»ñµÃB2,B3µÄÖ¡ÄÚÔ¤²âÄ£Ê½
		 p->i_intra_pred_mode_y[INTRA_MODE_B2] = p->p_top_intra_pred_mode_y[i_offset];
         p->i_intra_pred_mode_y[INTRA_MODE_B3] = p->p_top_intra_pred_mode_y[i_offset+1];
		 
		 
	}
	else
	{
		p->mv[MV_FWD_B2] = MV_NOT_AVAIL;
        p->mv[MV_FWD_B3] = MV_NOT_AVAIL;
        p->mv[MV_BWD_B2] = MV_NOT_AVAIL;
        p->mv[MV_BWD_B3] = MV_NOT_AVAIL;

		p->i_intra_pred_mode_y[INTRA_MODE_B2] = p->i_intra_pred_mode_y[INTRA_MODE_B3] = NOT_AVAIL;
      
	}
	if(p->i_mb_flags & C_AVAIL)
	{
		p->mv[MV_FWD_C2] = p->p_top_mv[0][i_offset+2];
        p->mv[MV_BWD_C2] = p->p_top_mv[1][i_offset+2];
	}
	else
	{
		p->mv[MV_FWD_C2] = MV_NOT_AVAIL;
        p->mv[MV_BWD_C2] = MV_NOT_AVAIL;
	}
//DºÍAÒ»ÑùÔÚ½âÂëºó»ñµÃ

	if(!(p->i_mb_flags & D_AVAIL))
	{
		p->mv[MV_FWD_D3] = MV_NOT_AVAIL;
	    p->mv[MV_BWD_D3] = MV_NOT_AVAIL;		
	}
	/*else
	{
		p->mv[MV_FWD_D3] = p->p_top_mv[0][i_offset-1];
	    p->mv[MV_BWD_D3] = p->p_top_mv[1][i_offset-1];
	}*/
	
	p->p_col_type = &p->p_col_type_base[p->i_mb_y*p->i_mb_width + p->i_mb_x];
	if(p->ph.b_aec_enable)
	{
		xavs_mb_init_aec(p);
	}
}